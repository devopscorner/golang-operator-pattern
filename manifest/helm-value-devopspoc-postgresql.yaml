global:
  imageRegistry: "docker.io"
  storageClass: "nfs-client"
  postgresql:
    auth:
      username: "postgres"
      postgresPassword: "v07oqTsP35M44zuv"
      password: "v07oqTsP35M44zuv"
      database: "restfulapi"
    service:
      ports:
        postgresql: "5432"

kubeVersion: ""
clusterDomain: cluster.local
nameOverride: "postgresql"
fullnameOverride: "postgresql"
namespaceOverride: "monitoring"

extraDeploy: []
commonLabels: {}
commonAnnotations: {}

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  # repository: postgres
  # tag: 16.3-alpine3.20
  repository: bitnami/postgresql
  # tag: 16.3.0
  tag: 16.3.0-debian-12-r19
  # tag: 16.1.0-debian-11-r4
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: true

auth:
  enablePostgresUser: true
  postgresPassword: "v07oqTsP35M44zuv"
  username: "postgres"
  password: "v07oqTsP35M44zuv"
  database: "restfulapi"
  replicationUsername: repl_user
  replicationPassword: "v07oqTsP35M44zuv"
  # existingSecret: "postgresql-secret"

architecture: standalone

replication:
  synchronousCommit: "off"
  numSynchronousReplicas: 0
  applicationName: devopspoc_restfulapi"

containerPorts:
  postgresql: 5432

audit:
  logHostname: false
  logConnections: false
  logDisconnections: false
  pgAuditLog: ""
  pgAuditLogCatalog: "off"
  clientMinMessages: error
  logLinePrefix: ""
  logTimezone: ""

## LDAP configuration
ldap:
  enabled: false
  server: ""
  port: ""
  prefix: ""
  suffix: ""
  basedn: ""
  binddn: ""
  bindpw: ""
  searchAttribute: ""
  searchFilter: ""
  scheme: ""
  tls:
    enabled: false
  uri: ""

postgresqlDataDir: /usr/share/devopspoc/postgresql/data
postgresqlSharedPreloadLibraries: "pgaudit"

shmVolume:
  enabled: true
  sizeLimit: ""

## TLS configuration
tls:
  enabled: false
  autoGenerated: false
  preferServerCiphers: true
  certificatesSecret: ""
  certFilename: ""
  certKeyFilename: ""
  certCAFilename: ""
  crlFilename: ""

primary:
  name: primary
  configuration: ""
  pgHbaConfiguration: ""
  existingConfigmap: ""
  extendedConfiguration: ""
  existingExtendedConfigmap: ""
  initdb:
    args: ""
    postgresqlWalDir: ""
    scripts: {}
    scriptsConfigMap: ""
    scriptsSecret: ""
    user: "postgres"
    password: "v07oqTsP35M44zuv"
  standby:
    enabled: false
    primaryHost: ""
    primaryPort: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  command: []
  args: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}

  resourcesPreset: "nano"

  resources:
    limits: {}
    requests:
      cpu: 250m
      memory: 256Mi

  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  initContainers: []
  # - name: init-permissions
  #   image: busybox
  #   command:
  #     - sh
  #     - -c
  #     - |
  #       mkdir -p /usr/share/devopspoc/postgresql/data
  #       chown -R 1001:1001 /usr/share/devopspoc/postgresql
  #   volumeMounts:
  #     - name: data
  #       mountPath: /usr/share/devopspoc/postgresql

  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""

  extraPodSpec: {}

  networkPolicy:
    enabled: true
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
    ingressRules:
      primaryAccessOnlyFrom:
        enabled: false
        namespaceSelector: {}
        podSelector: {}
        customRules: []
      readReplicasAccessOnlyFrom:
        enabled: false
        namespaceSelector: {}
        podSelector: {}
        customRules: []
    egressRules:
      denyConnectionsToExternal: false
      customRules: []

  ## PostgreSQL Primary service configuration
  ##
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: ""
    clusterIP: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      annotations: {}

  ## PostgreSQL Primary persistence configuration
  persistence:
    enabled: true
    existingClaim: ""
    mountPath: /usr/share/devopspoc/postgresql
    subPath: ""
    storageClass: "block-standard"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}

  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain

readReplicas:
  name: read
  replicaCount: 1
  extendedConfiguration: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  command: []
  args: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}

  lifecycleHooks: {}

  resourcesPreset: "nano"

  resources:
    limits: {}
    requests:
      cpu: 250m
      memory: 256Mi

  securityContext:
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"

  automountServiceAccountToken: false
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  initContainers: []
  extraPodSpec: {}

  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: ""
    clusterIP: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      annotations: {}

  ## PostgreSQL read only persistence configuration
  persistence:
    enabled: true
    existingClaim: ""
    mountPath: /usr/share/devopspoc/postgresql
    subPath: ""
    storageClass: "block-standard"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}

  ## PostgreSQL Read only Persistent Volume Claim Retention Policy
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain

backup:
  enabled: false
  cronjob:
    schedule: "@daily"
    timeZone: ""
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    startingDeadlineSeconds: ""
    ttlSecondsAfterFinished: ""
    restartPolicy: OnFailure
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## @param backup.cronjob.command Set backup container's command to run
    command:
      - /bin/sh
      - -c
      - "pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"

    labels: {}
    annotations: {}
    nodeSelector: {}
    storage:
      existingClaim: ""
      resourcePolicy: ""
      storageClass: "block-standard"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      annotations: {}
      mountPath: /backup/pgdump
      subPath: ""
      volumeClaimTemplates:
        selector: {}

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    seLinuxOptions: {}
    runAsUser: 0
    runAsGroup: 0
    runAsNonRoot: false
    seccompProfile:
      type: RuntimeDefault

serviceBindings:
  enabled: false

serviceAccount:
  create: false
  name: ""
  automountServiceAccountToken: true
  annotations: {}

rbac:
  create: false
  rules: []

psp:
  create: false

metrics:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.15.0-debian-12-r36
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  customMetrics: {}
  extraEnvVars: []
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"

  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}

  containerPorts:
    metrics: 9187

  resourcesPreset: "nano"

  resources:
    limits: {}
    requests: {}

  service:
    ports:
      metrics: 9187
    clusterIP: ""
    sessionAffinity: None
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"

  ## Prometheus Operator ServiceMonitor configuration
  serviceMonitor:
    enabled: true
    namespace: "monitoring"
    interval: ""
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""

  prometheusRule:
    enabled: false
    namespace: "monitoring"
    labels: {}
    rules: []
